class a{VIACEP_URL="https://viacep.com.br/ws";TIMEOUT=5e3;async getAddressByCEP(r){try{const o=this.cleanCEP(r);if(!this.isValidCEP(o))throw new Error("CEP invalido");const t=await this.fetchWithTimeout(`${this.VIACEP_URL}/${o}/json/`,this.TIMEOUT);if(!t.ok)throw new Error("Erro na consulta do CEP");const e=await t.json();if(e.erro)throw new Error("CEP nao encontrado");return this.convertViaCEPToAddress(e)}catch(o){throw console.error("Erro ao consultar CEP:",o),o instanceof Error?o:new Error("Erro ao consultar CEP")}}async searchCEPByAddress(r,o,t){try{if(!r||!o||!t)throw new Error("UF, cidade e logradouro sao obrigatorios");if(r.length!==2)throw new Error("UF deve ter 2 caracteres");if(t.length<3)throw new Error("Logradouro deve ter pelo menos 3 caracteres");const e=await this.fetchWithTimeout(`${this.VIACEP_URL}/${r}/${encodeURIComponent(o)}/${encodeURIComponent(t)}/json/`,this.TIMEOUT);if(!e.ok)throw new Error("Erro na busca de endereços");const n=await e.json();return!Array.isArray(n)||n.length===0?[]:n.map(s=>this.convertViaCEPToAddress(s))}catch(e){throw console.error("Erro ao buscar endereços:",e),e instanceof Error?e:new Error("Erro ao buscar endereços")}}isValidCEP(r){const o=this.cleanCEP(r);return/^\d{8}$/.test(o)}cleanCEP(r){return r.replace(/\D/g,"")}formatCEP(r){const o=this.cleanCEP(r);return o.length!==8?r:`${o.slice(0,5)}-${o.slice(5)}`}async fetchWithTimeout(r,o){const t=new AbortController,e=setTimeout(()=>t.abort(),o);try{const n=await fetch(r,{signal:t.signal,headers:{Accept:"application/json","Content-Type":"application/json"}});return clearTimeout(e),n}catch(n){throw clearTimeout(e),n instanceof Error&&n.name==="AbortError"?new Error("Timeout na consulta do CEP"):n}}convertViaCEPToAddress(r){return{cep:this.formatCEP(r.cep),street:r.logradouro,neighborhood:r.bairro,city:r.localidade,state:r.uf,complement:r.complemento||void 0}}}const i=new a;export{i as cepService};
